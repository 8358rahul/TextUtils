{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","Fragment","className","concat","mode","react_router_dom","to","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","style","color","heading","name","cols","rows","onChange","event","target","value","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","replace","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","About","myStyle","setMyStyle","_useState3","_useState4","btntext","setBtnText","aria-labelledby","data-bs-parent","defaultProps","App","setMode","setAlert","message","setTimeout","body","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.da558d05.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <>\r\n     <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <Link className=\"navbar-brand\" to=\"/\">\r\n      <b>{props.title}</b>\r\n    </Link>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\r\n            Home\r\n          </Link>  \r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link active\" aria-current=\"page\" to=\"/about\">\r\n            About Us\r\n          </Link>\r\n        </li>\r\n      </ul>\r\n      <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\"  id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n  </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n    \r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string,\r\n \r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Set Title Here\",\r\n};\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const [text,setText] = useState('');\r\n\r\n    const handleUpClick = ()=>{\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to uppercase!\", \"success\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to lower!\", \"success\")\r\n\r\n    }\r\n    const handleCopy =()=>{\r\n        let text = document.getElementById('myBox')\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied to clipboard!\", \"success\")\r\n\r\n    }\r\n    const handleExtraSpaces =()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Extra spaces removed!\", \"success\")\r\n\r\n    }\r\n    const handleRemovePun=()=>{\r\n        const regex = /[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]/g;\r\n        let newText= text.replace(regex,\"\");\r\n        setText(newText)\r\n        props.showAlert(\"Remove punchutions!\", \"success\")\r\n\r\n    }\r\n    const handleClearClick = ()=>{\r\n        let newText = \"\";\r\n        setText(newText)\r\n        props.showAlert(\"Text Cleared!\", \"success\")\r\n\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value)\r\n    }\r\n  return (\r\n    <>\r\n    <div className='container' style={{color:props.mode==='dark'?'white':'#042743'}}>\r\n    <h1>{props.heading}</h1>\r\n    <div className=\"mb-3\">\r\n        <textarea className='form-control' name=\"myBox\" id=\"myBox\" cols=\"30\" rows=\"10\" onChange={handleOnChange} value={text} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'#042743'}}></textarea>\r\n    </div>\r\n    <button className='btn btn-primary mx-1' onClick={handleUpClick}>Convert To UpperCase</button>\r\n    <button className='btn btn-primary mx-1' onClick={handleLoClick}>Convert To LowerCase</button>\r\n    <button className='btn btn-primary mx-1' onClick={handleCopy}>Copy Text</button>\r\n    <button className='btn btn-primary mx-1' onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    <button className='btn btn-primary mx-1' onClick={handleRemovePun}>Remove Punctuation</button>\r\n    <button className='btn btn-primary mx-1' onClick={handleClearClick}>Clear</button>\r\n    </div>\r\n\r\n    <div className=\"container\" style={{color: props.mode==='dark'?'white':'#042743'}}>\r\n        <h2>Your Text Summery</h2>\r\n        <p>{text.split(\" \").length} Words And {text.length} Characters</p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes Read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something In The Textbox Above To Priview It Here\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n  return (\r\n        props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [myStyle, setMyStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    })\r\n\r\n    const [btntext,setBtnText] = useState(\"Enable Dark Mode\")\r\n\r\n    const toggleStyle = ()=>{\r\n\r\n        if(myStyle.color === 'black'){\r\n            setMyStyle({\r\n                color:'white',\r\n                backgroundColor:'black'\r\n            })\r\n            setBtnText(\"Enable Light Mode\")\r\n        }\r\n        else{\r\n            setMyStyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setBtnText(\"Enable Dark Mode\")\r\n        }\r\n    }\r\n  return (\r\n    <div className='container' style={myStyle}>\r\n        <h1 className='my-3'>About Us</h1>\r\n      <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n      <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n        Accordion Item #1\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n        Accordion Item #2\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div className=\"accordion-item\">\r\n    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n      <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n        Accordion Item #3\r\n      </button>\r\n    </h2>\r\n    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n      <div className=\"accordion-body\" style={myStyle}>\r\n        <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classNamees that we use to style each element. These classNamees control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div className=\"container my-3\">\r\n<button onClick={toggleStyle} className=\"button btn btn-primary\">{btntext}</button>\r\n</div>\r\n</div>\r\n  )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode,setMode] = useState('light');//Whether dark mode is enaled or not\n  const [alert,setAlert] = useState(null);\n\n  const showAlert =(message,type)=>{\n    setAlert({\n      msg:message,\n      type:type,\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n\n  const toggleMode =()=>{\n    if(mode ==='light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      document.title=\"TextUtils - Dark Mode\"\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n      document.title=\"TextUtils - Light Mode\"\n\n            \n    }\n    }\n  \n  return (\n<Router>\n  <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} /> \n  <Alert alert={alert}/>\n  <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n          <TextForm showAlert={showAlert} heading=\"Enter the text analyze below\" mode={mode}/> \n          </Route>\n    </Switch>\n\n  </Router>  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}